# 读取CSV文件
temperature_data <- read.csv("F:\\Desktop\\时间序列分析\\Temperature_Vienna_OnlyCelsius.csv")
# 合并 month, day, year 列
temperature_data$date <- as.Date(paste(temperature_data$Year, temperature_data$Month, temperature_data$Day, sep = "-"))
# 删除原始的 month, day, year 列
temperature_data <- subset(temperature_data, select = -c(Month, Day, Year))
# 26条缺失值，手动补数据
temperature_data[835,"Celsius_Temperature"]=-2.740740741
temperature_data[836,"Celsius_Temperature"]=-4.481481481
temperature_data[841,"Celsius_Temperature"]=-3.888888889
temperature_data[842,"Celsius_Temperature"]=-5.166666667
temperature_data[852,"Celsius_Temperature"]=3.138888889
temperature_data[2107,"Celsius_Temperature"]=23.1
temperature_data[2108,"Celsius_Temperature"]=23.4222222
temperature_data[2109,"Celsius_Temperature"]=23.7444444
temperature_data[2110,"Celsius_Temperature"]=24.0666667
temperature_data[4004,"Celsius_Temperature"]=19.1388889
temperature_data[4397,"Celsius_Temperature"]=11.66666667
temperature_data[4594,"Celsius_Temperature"]=15.83333333
temperature_data[6358,"Celsius_Temperature"]=1.083333333
temperature_data[7051,"Celsius_Temperature"]=-0.407407407
temperature_data[7052,"Celsius_Temperature"]=-1.314814815
temperature_data[7178,"Celsius_Temperature"]=12.5
temperature_data[7317,"Celsius_Temperature"]=13.72222222
temperature_data[7368,"Celsius_Temperature"]=2.444444444
temperature_data[7787,"Celsius_Temperature"]=5
temperature_data[8101,"Celsius_Temperature"]=7.166666667
temperature_data[8102,"Celsius_Temperature"]=5
temperature_data[8262,"Celsius_Temperature"]=14.97222222
temperature_data[8284,"Celsius_Temperature"]=8.32222222
temperature_data[8285,"Celsius_Temperature"]=9.97777778
temperature_data[8286,"Celsius_Temperature"]=11.63333333
temperature_data[8287,"Celsius_Temperature"]=13.28888889
filtered_data_2 <- temperature_data[temperature_data$Celsius_Temperature == -72.77777778, ]
# 读取CSV文件
temperature_data <- read.csv("F:\\Desktop\\时间序列分析\\Temperature_Vienna_OnlyCelsius.csv")
# 合并 month, day, year 列
temperature_data$date <- as.Date(paste(temperature_data$Year, temperature_data$Month, temperature_data$Day, sep = "-"))
# 删除原始的 month, day, year 列
temperature_data <- subset(temperature_data, select = -c(Month, Day, Year))
# 26条缺失值，手动补数据
temperature_data[835,"Celsius_Temperature"]=-2.740740741
temperature_data[836,"Celsius_Temperature"]=-4.481481481
temperature_data[841,"Celsius_Temperature"]=-3.888888889
temperature_data[842,"Celsius_Temperature"]=-5.166666667
temperature_data[852,"Celsius_Temperature"]=3.138888889
temperature_data[2107,"Celsius_Temperature"]=23.1
temperature_data[2108,"Celsius_Temperature"]=23.4222222
temperature_data[2109,"Celsius_Temperature"]=23.7444444
temperature_data[2110,"Celsius_Temperature"]=24.0666667
temperature_data[4004,"Celsius_Temperature"]=19.1388889
temperature_data[4397,"Celsius_Temperature"]=11.66666667
temperature_data[4594,"Celsius_Temperature"]=15.83333333
temperature_data[6358,"Celsius_Temperature"]=1.083333333
temperature_data[7051,"Celsius_Temperature"]=-0.407407407
temperature_data[7052,"Celsius_Temperature"]=-1.314814815
temperature_data[7178,"Celsius_Temperature"]=12.5
temperature_data[7317,"Celsius_Temperature"]=13.72222222
temperature_data[7368,"Celsius_Temperature"]=2.444444444
temperature_data[7787,"Celsius_Temperature"]=5
temperature_data[8101,"Celsius_Temperature"]=7.166666667
temperature_data[8102,"Celsius_Temperature"]=5
temperature_data[8262,"Celsius_Temperature"]=14.97222222
temperature_data[8284,"Celsius_Temperature"]=8.32222222
temperature_data[8285,"Celsius_Temperature"]=9.97777778
temperature_data[8286,"Celsius_Temperature"]=11.63333333
temperature_data[8287,"Celsius_Temperature"]=13.28888889
filtered_data_2 <- temperature_data[temperature_data$Celsius_Temperature == -72.77777778, ]
# 分训练集，测试集
# 创建训练集（2019-01-01之前）和测试集（2019-01-01之后）
train_data <- subset(temperature_data, date < "2019-01-01")
test_data <- subset(temperature_data, date >= "2019-01-01")
# 显示训练集和测试集的行数
cat("训练集观测数量：", nrow(train_data), "\n")
cat("测试集观测数量：", nrow(test_data), "\n")
# 绘制温度时间序列的时序图
pdf("时序图.pdf", width = 8, height = 4)
plot(temperature_ts, type = "l", main = "Temperature Time Series", ylab = "Temperature", xlab = "Time")
# 加载时间序列包
library(stats)
# 将数据集转换为时间序列对象
temperature_ts <- ts(train_data$Celsius_Temperature,start = c(1996,9,11),frequency = 365)
temperature_ts_1 <- ts(train_data$Celsius_Temperature,start = c(1996,9,11),frequency = 1)
# 显示时间序列对象的摘要信息
print(summary(temperature_ts))
# 加载时间序列包
library(stats)
# 读取CSV文件
temperature_data <- read.csv("F:\\Desktop\\时间序列分析\\Temperature_Vienna_OnlyCelsius.csv")
# 合并 month, day, year 列
temperature_data$date <- as.Date(paste(temperature_data$Year, temperature_data$Month, temperature_data$Day, sep = "-"))
# 删除原始的 month, day, year 列
temperature_data <- subset(temperature_data, select = -c(Month, Day, Year))
# 26条缺失值，手动补数据
temperature_data[835,"Celsius_Temperature"]=-2.740740741
temperature_data[836,"Celsius_Temperature"]=-4.481481481
temperature_data[841,"Celsius_Temperature"]=-3.888888889
temperature_data[842,"Celsius_Temperature"]=-5.166666667
temperature_data[852,"Celsius_Temperature"]=3.138888889
temperature_data[2107,"Celsius_Temperature"]=23.1
temperature_data[2108,"Celsius_Temperature"]=23.4222222
temperature_data[2109,"Celsius_Temperature"]=23.7444444
temperature_data[2110,"Celsius_Temperature"]=24.0666667
temperature_data[4004,"Celsius_Temperature"]=19.1388889
temperature_data[4397,"Celsius_Temperature"]=11.66666667
temperature_data[4594,"Celsius_Temperature"]=15.83333333
temperature_data[6358,"Celsius_Temperature"]=1.083333333
temperature_data[7051,"Celsius_Temperature"]=-0.407407407
temperature_data[7052,"Celsius_Temperature"]=-1.314814815
temperature_data[7178,"Celsius_Temperature"]=12.5
temperature_data[7317,"Celsius_Temperature"]=13.72222222
temperature_data[7368,"Celsius_Temperature"]=2.444444444
temperature_data[7787,"Celsius_Temperature"]=5
temperature_data[8101,"Celsius_Temperature"]=7.166666667
temperature_data[8102,"Celsius_Temperature"]=5
temperature_data[8262,"Celsius_Temperature"]=14.97222222
temperature_data[8284,"Celsius_Temperature"]=8.32222222
temperature_data[8285,"Celsius_Temperature"]=9.97777778
temperature_data[8286,"Celsius_Temperature"]=11.63333333
temperature_data[8287,"Celsius_Temperature"]=13.28888889
filtered_data_2 <- temperature_data[temperature_data$Celsius_Temperature == -72.77777778, ]
# 分训练集，测试集
# 创建训练集（2019-01-01之前）和测试集（2019-01-01之后）
train_data <- subset(temperature_data, date < "2019-01-01")
test_data <- subset(temperature_data, date >= "2019-01-01")
# 显示训练集和测试集的行数
cat("训练集观测数量：", nrow(train_data), "\n")
cat("测试集观测数量：", nrow(test_data), "\n")
# 将数据集转换为时间序列对象
temperature_ts <- ts(train_data$Celsius_Temperature,start = c(1996,9,11),frequency = 365)
temperature_ts_1 <- ts(train_data$Celsius_Temperature,start = c(1996,9,11),frequency = 1)
# 显示时间序列对象的摘要信息
print(summary(temperature_ts))
# 绘制温度时间序列的时序图
pdf("时序图.pdf", width = 8, height = 4)
plot(temperature_ts, type = "l", main = "Temperature Time Series", ylab = "Temperature", xlab = "Time")
plot(train_data$date,train_data$Celsius_Temperature ,pch =16 , col = "RED", cex = 0.2)
# 绘制温度时间序列的时序图
pdf("时序图.pdf", width = 8, height = 4)
plot(temperature_ts, type = "l", main = "Temperature Time Series", ylab = "Temperature", xlab = "Time")
pdf("散点图.pdf",width = 8, height = 4)
plot(train_data$date,train_data$Celsius_Temperature ,pch =16 , col = "RED", cex = 0.2)
# 季节性分解
seasonal_decompose_m <- decompose(temperature_ts, type = c( "multiplicative"))
seasonal_decompose_a <- decompose(temperature_ts, type = c("additive"))
# 绘制季节分解图
#pdf("seasonal.pdf",width = 32, height = 4)
plot(seasonal_decompose_m)
plot(seasonal_decompose_a)
adf=ur.df(temperature_ts)
library(tseries)
# 进行ADF检验
adf_test <- adf.test(temperature_ts)
print(adf_test)
# p值远远小于0.05，表示拒绝原假设，即时间序列是平稳的
# 加载时间序列包
library(stats)
# 绘制自相关函数（ACF）图
pdf("acf.pdf", width = 32*4, height = 4)
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
pdf("pacf.pdf", width = 32*4, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 加载时间序列包
library(stats)
# 绘制自相关函数（ACF）图
pdf("acf1.pdf", width = 32*4, height = 4)
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
pdf("pacf.pdf", width = 32*4, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 加载时间序列包
library(stats)
# 绘制自相关函数（ACF）图
pdf("acf.pdf", width = 64, height = 4)
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
pdf("pacf.pdf", width = 64, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 加载时间序列包
library(stats)
# 绘制自相关函数（ACF）图
pdf("acf.pdf", width = 64, height = 4)
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
pdf("pacf.pdf", width = 64, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 加载时间序列包
library(stats)
# 绘制自相关函数（ACF）图
#pdf("acf.pdf", width = 64, height = 4)
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
#pdf("pacf.pdf", width = 64, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 加载时间序列包
library(stats)
# 绘制自相关函数（ACF）图
#pdf("acf.pdf", width = 64, height = 4)
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
#pdf("pacf.pdf", width = 64, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 加载时间序列包
library(stats)
# 读取CSV文件
temperature_data <- read.csv("F:\\Desktop\\时间序列分析\\Temperature_Vienna_OnlyCelsius.csv")
# 合并 month, day, year 列
temperature_data$date <- as.Date(paste(temperature_data$Year, temperature_data$Month, temperature_data$Day, sep = "-"))
# 删除原始的 month, day, year 列
temperature_data <- subset(temperature_data, select = -c(Month, Day, Year))
# 26条缺失值，手动补数据
temperature_data[835,"Celsius_Temperature"]=-2.740740741
temperature_data[836,"Celsius_Temperature"]=-4.481481481
temperature_data[841,"Celsius_Temperature"]=-3.888888889
temperature_data[842,"Celsius_Temperature"]=-5.166666667
temperature_data[852,"Celsius_Temperature"]=3.138888889
temperature_data[2107,"Celsius_Temperature"]=23.1
temperature_data[2108,"Celsius_Temperature"]=23.4222222
temperature_data[2109,"Celsius_Temperature"]=23.7444444
temperature_data[2110,"Celsius_Temperature"]=24.0666667
temperature_data[4004,"Celsius_Temperature"]=19.1388889
temperature_data[4397,"Celsius_Temperature"]=11.66666667
temperature_data[4594,"Celsius_Temperature"]=15.83333333
temperature_data[6358,"Celsius_Temperature"]=1.083333333
temperature_data[7051,"Celsius_Temperature"]=-0.407407407
temperature_data[7052,"Celsius_Temperature"]=-1.314814815
temperature_data[7178,"Celsius_Temperature"]=12.5
temperature_data[7317,"Celsius_Temperature"]=13.72222222
temperature_data[7368,"Celsius_Temperature"]=2.444444444
temperature_data[7787,"Celsius_Temperature"]=5
temperature_data[8101,"Celsius_Temperature"]=7.166666667
temperature_data[8102,"Celsius_Temperature"]=5
temperature_data[8262,"Celsius_Temperature"]=14.97222222
temperature_data[8284,"Celsius_Temperature"]=8.32222222
temperature_data[8285,"Celsius_Temperature"]=9.97777778
temperature_data[8286,"Celsius_Temperature"]=11.63333333
temperature_data[8287,"Celsius_Temperature"]=13.28888889
filtered_data_2 <- temperature_data[temperature_data$Celsius_Temperature == -72.77777778, ]
# 分训练集，测试集
# 创建训练集（2019-01-01之前）和测试集（2019-01-01之后）
train_data <- subset(temperature_data, date < "2019-01-01")
test_data <- subset(temperature_data, date >= "2019-01-01")
# 显示训练集和测试集的行数
cat("训练集观测数量：", nrow(train_data), "\n")
cat("测试集观测数量：", nrow(test_data), "\n")
# 将数据集转换为时间序列对象
temperature_ts <- ts(train_data$Celsius_Temperature,start = c(1996,9,11),frequency = 365)
temperature_ts_1 <- ts(train_data$Celsius_Temperature,start = c(1996,9,11),frequency = 1)
# 显示时间序列对象的摘要信息
print(summary(temperature_ts))
# 绘制自相关函数（ACF）图
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
pdf("pacf.pdf", width = 64, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 绘制自相关函数（ACF）图
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
pdf("pacf.pdf", width = 64, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 绘制自相关函数（ACF）图
pdf("acf.pdf", width = 64, height = 4)
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
pdf("pacf.pdf", width = 64, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 绘制自相关函数（ACF）图
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
pdf("pacf.pdf", width = 64, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
# 绘制自相关函数（ACF）图
pdf("acf.pdf", width = 64, height = 4)
acf(temperature_ts, lag=365*20, main = "Autocorrelation Plot")
#明显周期性
# 绘制偏自相关函数（PACF）图
pdf("pacf.pdf", width = 64, height = 4)
pacf(temperature_ts, lag=365*20,main = "Partial Autocorrelation Plot")
#明显周期性
q()
